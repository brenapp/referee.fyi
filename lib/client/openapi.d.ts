/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/integration/v1/{sku}/verify": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Verify Integration Token
         * @description Verifies the integration token and returns user information.
         */
        get: {
            parameters: {
                query?: {
                    token?: string;
                    instance?: string;
                };
                header?: never;
                path: {
                    sku: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful verification */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["GetIntegrationV1VerifyResponse"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/integration/v1/{sku}/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Gets information about the users in a shared instance. */
        get: {
            parameters: {
                query?: {
                    token?: string;
                    instance?: string;
                };
                header?: never;
                path: {
                    sku: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful verification */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["GetIntegrationV1UsersResponse"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/integration/v1/{sku}/incidents.json": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get incidents as JSON */
        get: {
            parameters: {
                query?: {
                    token?: string;
                    instance?: string;
                };
                header?: never;
                path: {
                    sku: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description JSON of incidents */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: components["schemas"]["Incident"][];
                        };
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/integration/v1/{sku}/incidents.pdf": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get incidents as PDF */
        get: {
            parameters: {
                query?: {
                    token?: string;
                    instance?: string;
                };
                header?: never;
                path: {
                    sku: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description PDF of incidents */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/pdf": string;
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/integration/v1/{sku}/incidents.csv": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get incidents as CSV */
        get: {
            parameters: {
                query?: {
                    token?: string;
                    instance?: string;
                };
                header?: never;
                path: {
                    sku: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description CSV of incidents */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/csv": string;
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/integration/v1/{sku}/asset": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Gets information about an asset. */
        get: {
            parameters: {
                query: {
                    id: string;
                    token?: string;
                    instance?: string;
                };
                header?: never;
                path: {
                    sku: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Asset information */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["GetIntegrationV1AssetResponse"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @description Indicates that the integration token is valid and the user is authenticated. */
        GetIntegrationV1VerifyResponse: {
            /** @enum {boolean} */
            success: true;
            data: {
                /** @enum {boolean} */
                valid: true;
            };
        };
        /** @description Error response schema */
        ErrorResponse: {
            /** @enum {boolean} */
            success: false;
            error: {
                /** @enum {string} */
                name: "ZodError";
                message: string;
            } | {
                /** @enum {string} */
                name: "ValidationError";
                message: string;
            };
            /** @enum {string} */
            code?: "VerifySignatureValuesNotPresent" | "VerifySignatureInvalidDateSkew" | "VerifySignatureInvalidPublicKey" | "VerifySignatureInvalidSignature" | "VerifyUserNotRegistered" | "VerifyUserNotSystemKey" | "VerifyInvitationNotFound" | "VerifyInvitationNotAccepted" | "VerifyInvitationInstanceNotFound" | "VerifyIntegrationTokenValuesNotPresent" | "VerifyIntegrationTokenInvalidSignature" | "VerifyIntegrationTokenInvalidInstance" | "VerifyIntegrationTokenInvalidUser" | "VerifyIntegrationTokenInvalidInvitation" | "VerifyUserAssetAuthorizedValuesNotPresent" | "VerifyUserAssetAuthorizedAssetNotFound" | "VerifyUserAssetAuthorizedImageNotFound" | "VerifyUserAssetAuthorizedUserNotAuthorized" | "VerifyInvitationAdminNotAuthorized" | "PutRequestCodeMustLeaveInstance" | "GetRequestCodeUnknownCode" | "GetAssetUploadURLInvalidAssetType" | "GetAssetUploadURLAssetAlreadyExists" | "GetAssetPreviewURLNotFound" | "GetAssetURLNotFound" | "GetInvitationNotFound" | "GetInvitationUserFromNotFound" | "PutInvitationAcceptNotFound" | "PutInvitationAcceptInvalid" | "PutInvitationMustLeaveCurrentInstance" | "PutIncidentDeleted" | "PatchIncidentDeleted" | "PatchIncidentEditInvalid" | "JoinInstanceMissingUpgradeHeader";
        };
        /** @description A registered user */
        User: {
            key: string;
            name: string;
            /** @enum {string} */
            role: "none" | "system";
        };
        /** @description Represents a user who has access to a shared instance. */
        InvitationListItem: {
            admin: boolean;
            user: components["schemas"]["User"];
        };
        GetIntegrationV1UsersResponse: {
            /** @enum {boolean} */
            success: true;
            data: {
                invitations: components["schemas"]["InvitationListItem"][];
                /** @description The list of users who are current connected to the instance websocket. */
                active: components["schemas"]["User"][];
            };
        };
        IncidentMatchHeadToHead: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "match";
            division: number;
            name: string;
            id: number;
        };
        IncidentMatchSkills: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "skills";
            /** @enum {string} */
            skillsType: "driver" | "programming";
            attempt: number;
        };
        /** @description The match associated with the incident, if applicable. */
        IncidentMatch: components["schemas"]["IncidentMatchHeadToHead"] | components["schemas"]["IncidentMatchSkills"];
        /**
         * @description The referee determined outcome of the incident.
         * @enum {string}
         */
        IncidentOutcome: "General" | "Minor" | "Major" | "Inspection" | "Disabled";
        /**
         * @description Flags that can be applied to an incident.
         * @enum {string}
         */
        IncidentFlag: "judge";
        /** @description History entry of a value. */
        History: {
            prev?: unknown;
            peer: string;
            instant: string;
        };
        /** @description Tracks the change in a value over time using last-write wins consistency. */
        KeyRegister: {
            count: number;
            peer: string;
            instant: string;
            history: components["schemas"]["History"][];
        };
        Incident: {
            id: string;
            /** @description ISO 8601 timestamp of when the incident occurred. */
            time: string;
            /** @description Event Code */
            event: string;
            match?: components["schemas"]["IncidentMatch"];
            /** @description Team Number */
            team: string;
            outcome: components["schemas"]["IncidentOutcome"];
            /** @description Cited rules in the violation, in the form <SG1> */
            rules: string[];
            notes: string;
            /** @description Asset IDs associated with the incident. */
            assets: string[];
            flags: components["schemas"]["IncidentFlag"][];
        } & {
            consistency: {
                match: components["schemas"]["KeyRegister"];
                outcome: components["schemas"]["KeyRegister"];
                rules: components["schemas"]["KeyRegister"];
                notes: components["schemas"]["KeyRegister"];
                assets: components["schemas"]["KeyRegister"];
                flags: components["schemas"]["KeyRegister"];
            };
        };
        /** @enum {string} */
        AssetType: "image";
        GetIntegrationV1AssetResponse: {
            /** @enum {boolean} */
            success: true;
            data: {
                type: components["schemas"]["AssetType"];
                owner: components["schemas"]["User"];
                sku: string;
                /** Format: uri */
                url: string;
                expires_at: string;
            };
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
