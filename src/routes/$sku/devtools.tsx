import { useMutation } from "@tanstack/react-query";
import { createFileRoute } from "@tanstack/react-router";
import { ReactNode, useCallback, useRef, useState } from "react";
import { ProgramCode } from "robotevents";
import { Button } from "~components/Button";
import { Input, Select } from "~components/Input";
import { Spinner } from "~components/Spinner";
import { toast } from "~components/Toast";
import { useShareConnection } from "~models/ShareConnection";
import {
  addManyIncidents,
  deleteManyIncidents,
  generateIncidentId,
  getIncidentsForEvent,
  IncidentOutcome,
  NewIncidentOptions,
  newManyIncidents,
} from "~utils/data/incident";
import { getShareProfile } from "~utils/data/share";
import {
  useCurrentSeason,
  useDivisionTeams,
  useEventMatches,
} from "~utils/hooks/robotevents";
import { useRulesForSeason } from "~utils/hooks/rules";
import { useCurrentEvent } from "~utils/hooks/state";

export const EventDevTools: React.FC = () => {
  const { data: event } = useCurrentEvent({
    networkMode: "always",
    refetchOnMount: "always",
  });

  const fileInputRef = useRef<HTMLInputElement | null>(null);
  const importIncidents = useCallback(async () => {
    const file = fileInputRef.current?.files?.[0];
    if (!file) return;

    const array = await file.arrayBuffer();
    const text = new TextDecoder().decode(array);

    try {
      const { incidents } = JSON.parse(text);
      await addManyIncidents(incidents);

      toast({
        type: "info",
        message: `Imported ${incidents.length} incidents`,
      });
    } catch (e) {
      toast({
        type: "error",
        message: "Failed to import incidents.",
        context: JSON.stringify(e),
      });
    }
  }, [fileInputRef]);

  const [generateIssueNumber, setGenerateIssueNumber] = useState(1000);
  const [generateIssuesDivision, setGenerateIssuesDivision] = useState(
    event?.divisions?.[0].id ?? 1
  );

  const { data: teamsInDivision } = useDivisionTeams(
    event,
    generateIssuesDivision
  );
  const { data: matchesInDivision } = useEventMatches(
    event,
    generateIssuesDivision
  );

  const { data: season } = useCurrentSeason(event?.program.id as ProgramCode);
  const { data: game } = useRulesForSeason(season);
  const rules = game?.ruleGroups.flatMap((group) => group.rules);

  const { mutate: generateIncidents, isPending: isGeneratePending } =
    useMutation({
      mutationFn: async () => {
        const { key: peer } = await getShareProfile();

        const newIncidents: NewIncidentOptions[] = [];

        for (let i = 0; i < generateIssueNumber; i++) {
          const team =
            teamsInDivision!.teams[
              Math.floor(Math.random() * teamsInDivision!.teams.length)
            ];

          const match =
            matchesInDivision?.[
              Math.floor(Math.random() * matchesInDivision.length)
            ];

          const rule = rules?.[Math.floor(Math.random() * rules.length)];
          const notes = `Generated by DevTools at ${new Date().toISOString()}`;

          const OUTCOMES: IncidentOutcome[] = [
            "Minor",
            "Major",
            "Disabled",
            "General",
          ];
          const outcome = OUTCOMES[Math.floor(Math.random() * OUTCOMES.length)];

          const incident: NewIncidentOptions = {
            data: {
              event: event!.sku,
              team: team?.number,
              match: match
                ? {
                    type: "match",
                    division: generateIssuesDivision,
                    id: match.id,
                    name: match.name,
                  }
                : undefined,
              outcome,
              rules: rule ? [rule.rule] : [],
              time: new Date(),
              notes,
              assets: [],
              flags: [],
            },
            peer,
            id: generateIncidentId(),
          };
          newIncidents.push(incident);
        }
        await newManyIncidents(newIncidents);

        toast({
          type: "info",
          message: `Generated ${generateIssueNumber} incidents`,
        });
      },
    });

  const connection = useShareConnection(["disconnect"]);

  const [incidentsToDelete, setIncidentsToDelete] = useState(10);
  const { mutate: deleteIncidents, isPending: isDeletePending } = useMutation({
    mutationFn: async () => {
      const incidents = await getIncidentsForEvent(event!.sku);
      const toDelete = [...incidents]
        .sort(() => Math.random() - 0.5)
        .slice(0, incidentsToDelete);
      await deleteManyIncidents(toDelete);
    },
  });

  // Error
  const [errorChild, setErrorChild] = useState<Record<string, unknown> | false>(
    false
  );

  return (
    <section className="mt-4">
      <section className="mt-4">
        <h2 className="font-bold">Import Incidents</h2>
        <p>
          Import incidents from JSON file. This will overwrite local changes.
        </p>
        <Input
          type="file"
          className="mt-2 w-full"
          accept=".json"
          ref={fileInputRef}
        />
        <Button className="mt-2" mode="primary" onClick={importIncidents}>
          Import
        </Button>
      </section>
      <section className="mt-4">
        <h2 className="font-bold">Generate Random Incidents</h2>
        <p>
          Will assign a random match and team with the selected division, and
          random rules. Note will include the time generated.
        </p>
        <fieldset className="flex mt-2 gap-2">
          <label className="mt-2 flex-1">
            <p>Number to Generate</p>
            <Input
              type="number"
              step={1}
              className="w-full"
              value={generateIssueNumber}
              onChange={(e) => {
                setGenerateIssueNumber(parseInt(e.currentTarget.value, 10));
              }}
            ></Input>
          </label>
          <label className="mt-2 flex-1">
            <p>Division</p>
            <Select
              className="w-full"
              value={generateIssuesDivision}
              onChange={(e) => setGenerateIssuesDivision(+e.target.value)}
            >
              {event?.divisions?.map((division) => (
                <option key={division.id} value={division.id}>
                  {division.name}
                </option>
              ))}
            </Select>
          </label>
        </fieldset>
        <Button
          className="mt-2"
          mode="primary"
          onClick={() => generateIncidents()}
        >
          Generate
        </Button>
        <Spinner show={isGeneratePending} />
      </section>
      <section className="mt-4">
        <h2 className="font-bold">Delete Random Incidents</h2>
        <p>Delete up to this many incidents, randomly</p>
        <fieldset className="flex mt-2 gap-2">
          <label className="mt-2 flex-1">
            <p>Number to Delete</p>
            <Input
              type="number"
              step={1}
              className="w-full"
              value={incidentsToDelete}
              onChange={(e) => {
                setIncidentsToDelete(parseInt(e.currentTarget.value, 10));
              }}
            ></Input>
          </label>
        </fieldset>
        <Button
          className="mt-2"
          mode="dangerous"
          onClick={() => deleteIncidents()}
        >
          Delete
        </Button>
        <Spinner show={isDeletePending} />
      </section>
      <section className="mt-4">
        <h2 className="font-bold">Share Connection</h2>
        <pre className="mt-2 bg-zinc-900 p-4 rounded-md">
          <code>{JSON.stringify(connection, null, 2)}</code>
        </pre>
      </section>
      <nav className="flex gap-2 mt-2">
        <Button mode="dangerous" onClick={() => connection.disconnect()}>
          Disconnect
        </Button>
      </nav>
      <section className="mt-4">
        <h2 className="font-bold">Throw an Error</h2>
        <Button
          mode="dangerous"
          onClick={() =>
            setErrorChild({
              "REFEREE FYI DEVTOOLS ERROR": new Error("Test Error"),
            })
          }
        >
          Throw Error
        </Button>
        {errorChild as ReactNode}
      </section>
    </section>
  );
};

export const Route = createFileRoute("/$sku/devtools")({
  component: EventDevTools,
});
