
/**
 * This file was auto-generated. Do not edit this file directly.
 * @noformat
 **/
/* eslint-disable */
export interface paths {
    "/api/updateQuestions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Update questions from the QNAPlus API. */
        get: {
            parameters: {
                query: {
                    version: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Update successful */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UpdateQuestionsSuccessResponse"];
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Search for rules and Q&As. */
        get: {
            parameters: {
                query: {
                    query: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Search results */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SearchSuccessResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @description A question in the Q&A system. */
        Question: {
            id: string;
            url: string;
            author: string;
            program: string;
            title: string;
            season: string;
            askedTimestamp: string;
            askedTimestampMs: number;
            answeredTimestamp: string | null;
            answeredTimestampMs: number | null;
            answered?: boolean | null;
            tags: string[];
            question: string;
            questionRaw: string;
            answer: string | null;
            answerRaw: string | null;
        };
        /** @description Response schema for questions update */
        QuestionsResponse: {
            outdated: boolean | null;
            version: string;
            questions: components["schemas"]["Question"][];
        };
        UpdateQuestionsSuccessResponse: {
            /** @enum {boolean} */
            success: true;
            data: components["schemas"]["QuestionsResponse"];
        };
        /** @description Error response schema */
        ErrorResponse: {
            /** @enum {boolean} */
            success: false;
            error: string;
            /** @enum {string} */
            code?: "UpdateQuestionsRefreshFailed";
        };
        /** @description The search response */
        SearchResponse: {
            /** @enum {string} */
            object: "vector_store.search_results.page";
            search_query: string;
            data: {
                file_id: string;
                filename: string;
                score: number;
                attributes: {
                    [key: string]: string | number | (boolean | null) | unknown | unknown;
                };
                content: {
                    /** @enum {string} */
                    type: "text";
                    text: string;
                }[];
            }[];
            has_more?: boolean | null;
            next_page: string | null;
        };
        SearchSuccessResponse: {
            /** @enum {boolean} */
            success: true;
            data: components["schemas"]["SearchResponse"];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
