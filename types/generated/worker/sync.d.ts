/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/integration/v1/{sku}/verify": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Verify Integration Token
         * @description Verifies the integration token and returns user information.
         */
        get: {
            parameters: {
                query: {
                    token: string;
                    instance?: string;
                };
                header?: never;
                path: {
                    sku: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful verification */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["GetIntegrationV1VerifyResponse"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/integration/v1/{sku}/incident": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete an incident in a shared instance
         * @description Deletes an incident in a shared instance. Requires a system token.
         */
        delete: {
            parameters: {
                query: {
                    token: string;
                    instance?: string;
                    id: string;
                };
                header?: never;
                path: {
                    sku: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful verification */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["DeleteIntegrationV1IncidentResponse"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/integration/v1/{sku}/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Gets information about the users in a shared instance. */
        get: {
            parameters: {
                query: {
                    token: string;
                    instance?: string;
                };
                header?: never;
                path: {
                    sku: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful verification */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["GetIntegrationV1UsersResponse"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/integration/v1/{sku}/incidents.json": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get incidents as JSON */
        get: {
            parameters: {
                query: {
                    token: string;
                    instance?: string;
                };
                header?: never;
                path: {
                    sku: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description JSON of incidents */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: {
                                id: string;
                                /** Format: date */
                                time: string;
                                /** @description Event Code */
                                event: string;
                                match?: {
                                    /** @enum {string} */
                                    type: "match";
                                    division: number;
                                    name: string;
                                    id: number;
                                } | {
                                    /** @enum {string} */
                                    type: "skills";
                                    /** @enum {string} */
                                    skillsType: "driver" | "programming";
                                    attempt: number;
                                };
                                /** @description Team Number */
                                team: string;
                                outcome: components["schemas"]["IncidentOutcome"];
                                /** @description Cited rules in the violation, in the form <SG1> */
                                rules: string[];
                                notes: string;
                                /** @description Asset IDs associated with the incident. */
                                assets: string[];
                                flags: components["schemas"]["IncidentFlag"][];
                                consistency: {
                                    [key: string]: {
                                        count: number;
                                        peer: string;
                                        instant: string;
                                        history: {
                                            prev?: unknown;
                                            peer: string;
                                            instant: string;
                                        }[];
                                    };
                                };
                            }[];
                        };
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/integration/v1/{sku}/incidents.pdf": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get incidents as PDF */
        get: {
            parameters: {
                query: {
                    token: string;
                    instance?: string;
                };
                header?: never;
                path: {
                    sku: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description PDF of incidents */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/pdf": string;
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/integration/v1/{sku}/incidents.csv": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get incidents as CSV */
        get: {
            parameters: {
                query: {
                    token: string;
                    instance?: string;
                };
                header?: never;
                path: {
                    sku: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description CSV of incidents */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/csv": string;
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/meta/location": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Gets location information for a user.
         * @description Returns location information based on the request's origin.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Location information */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["GetMetaLocationResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Register information about a user device.
         * @description Register a device's public key with the sync engine.
         */
        post: {
            parameters: {
                query: {
                    name: string;
                };
                header?: {
                    "X-Referee-Signature"?: string;
                    "X-Referee-Public-Key"?: string;
                    "X-Referee-Date"?: string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description User registered successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PostUserResponse"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/{sku}/invitation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Gets the user's current invitation for an event. */
        get: {
            parameters: {
                query?: never;
                header?: {
                    "X-Referee-Signature"?: string;
                    "X-Referee-Public-Key"?: string;
                    "X-Referee-Date"?: string;
                };
                path: {
                    sku: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The user's invitation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["GetInvitationResponse"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/{sku}/invite": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Invites another user to join an instance */
        put: {
            parameters: {
                query: {
                    user: string;
                    admin: boolean;
                };
                header?: {
                    "X-Referee-Signature"?: string;
                    "X-Referee-Public-Key"?: string;
                    "X-Referee-Date"?: string;
                };
                path: {
                    sku: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Invitation created successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PutInvitationResponse"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        post?: never;
        /** Remove an invitation from a user. */
        delete: {
            parameters: {
                query: {
                    user: string;
                };
                header?: {
                    "X-Referee-Signature"?: string;
                    "X-Referee-Public-Key"?: string;
                    "X-Referee-Date"?: string;
                };
                path: {
                    sku: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description User removed from invitation successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["DeleteInvitationResponse"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/{sku}/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Gets all active instances for an event. */
        get: {
            parameters: {
                query?: never;
                header?: {
                    "X-Referee-Signature"?: string;
                    "X-Referee-Public-Key"?: string;
                    "X-Referee-Date"?: string;
                };
                path: {
                    sku: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description All active instances for an event. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["GetInvitationListResponse"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/{sku}/request": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtains another user's public key. */
        get: {
            parameters: {
                query: {
                    code: string;
                };
                header?: {
                    "X-Referee-Signature"?: string;
                    "X-Referee-Public-Key"?: string;
                    "X-Referee-Date"?: string;
                };
                path: {
                    sku: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Public key retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: {
                                user: components["schemas"]["User"];
                                version: string;
                            };
                        };
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        /** Publishes your public key. */
        put: {
            parameters: {
                query: {
                    version: string;
                };
                header?: {
                    "X-Referee-Signature"?: string;
                    "X-Referee-Public-Key"?: string;
                    "X-Referee-Date"?: string;
                };
                path: {
                    sku: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Public key published successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: {
                                code: string;
                                ttl: number;
                            };
                        };
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/{sku}/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create a new shared instance, and adds user to it. */
        post: {
            parameters: {
                query?: never;
                header?: {
                    "X-Referee-Signature"?: string;
                    "X-Referee-Public-Key"?: string;
                    "X-Referee-Date"?: string;
                };
                path: {
                    sku: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Instance created successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PostCreateResponse"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/{sku}/accept": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Accept an invitation to join an shared instance. */
        put: {
            parameters: {
                query: {
                    /** @description The invitation ID to accept. */
                    invitation: string;
                };
                header?: {
                    "X-Referee-Signature"?: string;
                    "X-Referee-Public-Key"?: string;
                    "X-Referee-Date"?: string;
                };
                path: {
                    sku: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successfully accepted the invitation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PutInvitationAcceptResponse"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/{sku}/asset/upload_url": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Gets an upload URL for an asset. */
        get: {
            parameters: {
                query: {
                    type: "image";
                    id: string;
                };
                header?: {
                    "X-Referee-Signature"?: string;
                    "X-Referee-Public-Key"?: string;
                    "X-Referee-Date"?: string;
                };
                path: {
                    sku: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successfully retrieved asset upload URL */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["GetAssetUploadURLResponse"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/{sku}/asset/url": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Gets the signed URL for an asset. */
        get: {
            parameters: {
                query: {
                    id: string;
                };
                header?: {
                    "X-Referee-Signature"?: string;
                    "X-Referee-Public-Key"?: string;
                    "X-Referee-Date"?: string;
                };
                path: {
                    sku: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successfully retrieved signed asset URL */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["GetAssetURLResponse"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/{sku}/asset/preview_url": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Gets the preview URL for an asset. */
        get: {
            parameters: {
                query: {
                    id: string;
                };
                header?: {
                    "X-Referee-Signature"?: string;
                    "X-Referee-Public-Key"?: string;
                    "X-Referee-Date"?: string;
                };
                path: {
                    sku: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successfully retrieved asset preview URL */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["GetAssetPreviewURLResponse"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/{sku}/incident": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Creates a new incident. */
        put: {
            parameters: {
                query?: never;
                header?: {
                    "X-Referee-Signature"?: string;
                    "X-Referee-Public-Key"?: string;
                    "X-Referee-Date"?: string;
                };
                path: {
                    sku: string;
                };
                cookie?: never;
            };
            /** @description Incident body to create */
            requestBody: {
                content: {
                    "application/json": {
                        id: string;
                        /** Format: date */
                        time: string;
                        /** @description Event Code */
                        event: string;
                        match?: {
                            /** @enum {string} */
                            type: "match";
                            division: number;
                            name: string;
                            id: number;
                        } | {
                            /** @enum {string} */
                            type: "skills";
                            /** @enum {string} */
                            skillsType: "driver" | "programming";
                            attempt: number;
                        };
                        /** @description Team Number */
                        team: string;
                        outcome: components["schemas"]["IncidentOutcome"];
                        /** @description Cited rules in the violation, in the form <SG1> */
                        rules: string[];
                        notes: string;
                        /** @description Asset IDs associated with the incident. */
                        assets: string[];
                        flags: components["schemas"]["IncidentFlag"][];
                        consistency: {
                            [key: string]: {
                                count: number;
                                peer: string;
                                instant: string;
                                history: {
                                    prev?: unknown;
                                    peer: string;
                                    instant: string;
                                }[];
                            };
                        };
                    };
                };
            };
            responses: {
                /** @description Incident created successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PutIncidentResponse"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        post?: never;
        /** Delete an incident. */
        delete: {
            parameters: {
                query: {
                    id: string;
                };
                header?: {
                    "X-Referee-Signature"?: string;
                    "X-Referee-Public-Key"?: string;
                    "X-Referee-Date"?: string;
                };
                path: {
                    sku: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Incident deleted successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["DeleteIncidentResponse"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        /** Edit an incident. */
        patch: {
            parameters: {
                query?: never;
                header?: {
                    "X-Referee-Signature"?: string;
                    "X-Referee-Public-Key"?: string;
                    "X-Referee-Date"?: string;
                };
                path: {
                    sku: string;
                };
                cookie?: never;
            };
            /** @description Incident body to edit */
            requestBody: {
                content: {
                    "application/json": {
                        id: string;
                        /** Format: date */
                        time: string;
                        /** @description Event Code */
                        event: string;
                        match?: {
                            /** @enum {string} */
                            type: "match";
                            division: number;
                            name: string;
                            id: number;
                        } | {
                            /** @enum {string} */
                            type: "skills";
                            /** @enum {string} */
                            skillsType: "driver" | "programming";
                            attempt: number;
                        };
                        /** @description Team Number */
                        team: string;
                        outcome: components["schemas"]["IncidentOutcome"];
                        /** @description Cited rules in the violation, in the form <SG1> */
                        rules: string[];
                        notes: string;
                        /** @description Asset IDs associated with the incident. */
                        assets: string[];
                        flags: components["schemas"]["IncidentFlag"][];
                        consistency: {
                            [key: string]: {
                                count: number;
                                peer: string;
                                instant: string;
                                history: {
                                    prev?: unknown;
                                    peer: string;
                                    instant: string;
                                }[];
                            };
                        };
                    };
                };
            };
            responses: {
                /** @description Incident created successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PatchIncidentResponse"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Incident edit conflict */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/api/{sku}/data": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get instance share data. */
        get: {
            parameters: {
                query?: never;
                header?: {
                    "X-Referee-Signature"?: string;
                    "X-Referee-Public-Key"?: string;
                    "X-Referee-Date"?: string;
                };
                path: {
                    sku: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Instance Share Data */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["GetDataResponse"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @description Indicates that the integration token is valid and the user is authenticated. */
        GetIntegrationV1VerifyResponse: {
            /** @enum {boolean} */
            success: true;
            data: {
                /** @enum {boolean} */
                valid: true;
            };
        };
        /** @description Error response schema */
        ErrorResponse: {
            /** @enum {boolean} */
            success: false;
            error: string;
            /** @enum {string} */
            code?: "VerifySignatureValuesNotPresent" | "VerifySignatureInvalidDateSkew" | "VerifySignatureInvalidPublicKey" | "VerifySignatureInvalidSignature" | "VerifyUserNotRegistered" | "VerifyUserNotSystemKey" | "VerifyInvitationNotFound" | "VerifyInvitationNotAccepted" | "VerifyInvitationInstanceNotFound" | "VerifyIntegrationTokenValuesNotPresent" | "VerifyIntegrationTokenInvalidSignature" | "VerifyIntegrationTokenInvalidInstance" | "VerifyIntegrationTokenInvalidUser" | "VerifyIntegrationTokenInvalidInvitation" | "VerifyUserAssetAuthorizedValuesNotPresent" | "VerifyUserAssetAuthorizedAssetNotFound" | "VerifyUserAssetAuthorizedImageNotFound" | "VerifyUserAssetAuthorizedUserNotAuthorized" | "VerifyInvitationAdminNotAuthorized" | "PutRequestCodeMustLeaveInstance" | "GetRequestCodeUnknownCode" | "GetAssetUploadURLInvalidAssetType" | "GetAssetUploadURLAssetAlreadyExists" | "GetAssetPreviewURLNotFound" | "GetAssetURLNotFound" | "GetInvitationNotFound" | "GetInvitationUserFromNotFound" | "PutInvitationAcceptNotFound" | "PutInvitationAcceptInvalid" | "PutInvitationMustLeaveCurrentInstance" | "PutIncidentDeleted" | "PatchIncidentDeleted" | "PatchIncidentEditInvalid";
        };
        DeleteIntegrationV1IncidentResponse: {
            /** @enum {boolean} */
            success: true;
            data: Record<string, never>;
        };
        /** @description A registered user */
        User: {
            key: string;
            name: string;
        };
        /** @description Represents a user who has access to a shared instance. */
        InvitationListItem: {
            admin: boolean;
            user: components["schemas"]["User"];
        };
        GetIntegrationV1UsersResponse: {
            /** @enum {boolean} */
            success: true;
            data: {
                invitations: components["schemas"]["InvitationListItem"][];
                /** @description The list of users who are current connected to the instance websocket. */
                active: components["schemas"]["User"][];
            };
        };
        /**
         * @description The referee determined outcome of the incident.
         * @enum {string}
         */
        IncidentOutcome: "General" | "Minor" | "Major" | "Inspection" | "Disabled";
        /**
         * @description Flags that can be applied to an incident.
         * @enum {string}
         */
        IncidentFlag: "judge";
        /** @description Response for the /api/meta/location endpoint */
        GetMetaLocationResponse: {
            /** @enum {boolean} */
            success: true;
            data: {
                location: {
                    city: string;
                    colo: string;
                    region: string;
                    country: string;
                    country_code: string;
                    postcode: string;
                    continent: string;
                } | null;
            };
        };
        /** @description Response body for user registration */
        PostUserResponse: {
            /** @enum {boolean} */
            success: true;
            data: {
                user: components["schemas"]["User"];
                isSystemKey: boolean;
            };
        };
        /** @description The user's invitation for an event. */
        GetInvitationResponse: {
            /** @enum {boolean} */
            success: true;
            data: {
                id: string;
                admin: boolean;
                accepted: boolean;
                sku: string;
                from: components["schemas"]["User"];
            };
        };
        PutInvitationResponse: {
            /** @enum {boolean} */
            success: true;
            data: Record<string, never>;
        };
        DeleteInvitationResponse: {
            /** @enum {boolean} */
            success: true;
            data: Record<string, never>;
        };
        /** @description All active instances for an event. */
        GetInvitationListResponse: {
            /** @enum {boolean} */
            success: true;
            data: {
                instances: string[];
            };
        };
        /** @description Indicates a new shared instance has been created. */
        PostCreateResponse: {
            /** @enum {boolean} */
            success: true;
            data: {
                id: string;
                admin: boolean;
                accepted: boolean;
                sku: string;
                from: components["schemas"]["User"];
            };
        };
        /** @description User successfully accepted the invitation. */
        PutInvitationAcceptResponse: {
            /** @enum {boolean} */
            success: true;
            data: {
                id: string;
                admin: boolean;
                accepted: boolean;
                sku: string;
                from: components["schemas"]["User"];
            };
        };
        GetAssetUploadURLResponse: {
            /** @enum {boolean} */
            success: true;
            data: {
                uploadURL: string;
            };
        };
        GetAssetURLResponse: {
            /** @enum {boolean} */
            success: true;
            data: {
                owner: string;
                url: string;
            };
        };
        GetAssetPreviewURLResponse: {
            /** @enum {boolean} */
            success: true;
            data: {
                owner: string;
                previewURL: string;
            };
        };
        PutIncidentResponse: {
            /** @enum {boolean} */
            success: true;
            data: {
                id: string;
                /** Format: date */
                time: string;
                /** @description Event Code */
                event: string;
                match?: {
                    /** @enum {string} */
                    type: "match";
                    division: number;
                    name: string;
                    id: number;
                } | {
                    /** @enum {string} */
                    type: "skills";
                    /** @enum {string} */
                    skillsType: "driver" | "programming";
                    attempt: number;
                };
                /** @description Team Number */
                team: string;
                outcome: components["schemas"]["IncidentOutcome"];
                /** @description Cited rules in the violation, in the form <SG1> */
                rules: string[];
                notes: string;
                /** @description Asset IDs associated with the incident. */
                assets: string[];
                flags: components["schemas"]["IncidentFlag"][];
                consistency: {
                    [key: string]: {
                        count: number;
                        peer: string;
                        instant: string;
                        history: {
                            prev?: unknown;
                            peer: string;
                            instant: string;
                        }[];
                    };
                };
            };
        };
        PatchIncidentResponse: {
            /** @enum {boolean} */
            success: true;
            data: {
                id: string;
                /** Format: date */
                time: string;
                /** @description Event Code */
                event: string;
                match?: {
                    /** @enum {string} */
                    type: "match";
                    division: number;
                    name: string;
                    id: number;
                } | {
                    /** @enum {string} */
                    type: "skills";
                    /** @enum {string} */
                    skillsType: "driver" | "programming";
                    attempt: number;
                };
                /** @description Team Number */
                team: string;
                outcome: components["schemas"]["IncidentOutcome"];
                /** @description Cited rules in the violation, in the form <SG1> */
                rules: string[];
                notes: string;
                /** @description Asset IDs associated with the incident. */
                assets: string[];
                flags: components["schemas"]["IncidentFlag"][];
                consistency: {
                    [key: string]: {
                        count: number;
                        peer: string;
                        instant: string;
                        history: {
                            prev?: unknown;
                            peer: string;
                            instant: string;
                        }[];
                    };
                };
            };
        };
        DeleteIncidentResponse: {
            /** @enum {boolean} */
            success: true;
            data: Record<string, never>;
        };
        /** @description Indicates a new shared instance has been created. */
        GetDataResponse: {
            /** @enum {boolean} */
            success: true;
            data: {
                /** @enum {string} */
                type: "server_share_info";
                sku: string;
                incidents: {
                    deleted: string[];
                    values: {
                        [key: string]: {
                            id: string;
                            /** Format: date */
                            time: string;
                            /** @description Event Code */
                            event: string;
                            match?: {
                                /** @enum {string} */
                                type: "match";
                                division: number;
                                name: string;
                                id: number;
                            } | {
                                /** @enum {string} */
                                type: "skills";
                                /** @enum {string} */
                                skillsType: "driver" | "programming";
                                attempt: number;
                            };
                            /** @description Team Number */
                            team: string;
                            outcome: components["schemas"]["IncidentOutcome"];
                            /** @description Cited rules in the violation, in the form <SG1> */
                            rules: string[];
                            notes: string;
                            /** @description Asset IDs associated with the incident. */
                            assets: string[];
                            flags: components["schemas"]["IncidentFlag"][];
                            consistency: {
                                [key: string]: {
                                    count: number;
                                    peer: string;
                                    instant: string;
                                    history: {
                                        prev?: unknown;
                                        peer: string;
                                        instant: string;
                                    }[];
                                };
                            };
                        };
                    };
                };
                scratchpads: {
                    deleted: string[];
                    values: {
                        [key: string]: {
                            id: string;
                            event: string;
                            match: {
                                /** @enum {string} */
                                type: "match";
                                division: number;
                                name: string;
                                id: number;
                            };
                            notes?: string;
                            consistency: {
                                [key: string]: {
                                    count: number;
                                    peer: string;
                                    instant: string;
                                    history: {
                                        prev?: unknown;
                                        peer: string;
                                        instant: string;
                                    }[];
                                };
                            };
                        };
                    };
                };
                users: {
                    active: components["schemas"]["User"][];
                    invitations: components["schemas"]["InvitationListItem"][];
                };
            };
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
